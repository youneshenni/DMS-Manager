(function (React, designSystem, adminjs) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);

    const EditReference = props => {
      console.log("test reference");
      console.log(props);
      const {
        onChange,
        property,
        record
      } = props;
      const {
        reference: resourceId
      } = property;
      console.log(props);
      if (!resourceId) {
        throw new Error(`Cannot reference resource in property '${property.path}'`);
      }
      const handleChange = selected => {
        if (selected) {
          onChange(property.path, selected.value, selected.record);
        } else {
          onChange(property.path, null);
        }
      };
      var loadOptions = async inputValue => {
        const api = new adminjs.ApiClient();
        console.log(inputValue);
        console.log(resourceId);
        let optionRecords;
        if (record?.params?.[`${resourceId}Data`]) {
          optionRecords = record?.params?.[`${resourceId}Data`];
        } else {
          optionRecords = await api.searchRecords({
            resourceId,
            query: inputValue
          });
        }
        console.log(optionRecords);
        return optionRecords.map(optionRecord => ({
          value: optionRecord.id,
          label: optionRecord.title,
          record: optionRecord
        }));
      };
      const error = record?.errors[property.path];
      const selectedId = React.useMemo(() => adminjs.flat.get(record?.params, property.path), [record]);
      const [loadedRecord, setLoadedRecord] = React.useState();
      const [loadingRecord, setLoadingRecord] = React.useState(0);
      React.useEffect(() => {
        if (selectedId) {
          setLoadingRecord(c => c + 1);
          const api = new adminjs.ApiClient();
          api.recordAction({
            actionName: "show",
            resourceId,
            recordId: selectedId
          }).then(({
            data
          }) => {
            setLoadedRecord(data.record);
          }).finally(() => {
            setLoadingRecord(c => c - 1);
          });
        }
      }, [selectedId, resourceId]);
      const selectedValue = loadedRecord;
      const selectedOption = selectedId && selectedValue ? {
        value: selectedValue.id,
        label: selectedValue.title
      } : {
        value: "",
        label: ""
      };
      return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
        error: Boolean(error)
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, property.label), /*#__PURE__*/React__default.default.createElement(designSystem.SelectAsync, {
        cacheOptions: true,
        value: selectedOption,
        defaultOptions: true,
        loadOptions: loadOptions,
        onChange: handleChange,
        isClearable: true,
        isDisabled: property.isDisabled,
        isLoading: !!loadingRecord,
        ...property.props
      }), /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, error?.message ?? ""));
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.DefaultReferenceEditProperty = EditReference;

})(React, AdminJSDesignSystem, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
